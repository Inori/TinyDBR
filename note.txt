
ModRM 
==================


mov rbx, [rcx + 0x40]
-----------------------

pushfq
pushaq
lea rdx, [rcx + 0x40]

# we use rbp to save rsp value
# this is safe because both Windows x64 ABI and SystemV x64 ABI 
# guarantees rbp must be saved and restored by a function that uses them
mov rbp, rsp

sub rsp, 0x20
and rsp, 0xFFFFFFFFFFFFFFF0

mov rcx, this
mov r8, 8
mov r9, rbx
mov rax, OnMemoryRead
call rax

mov rsp, rbp
popaq
popfq

mov rbx, [rcx + 0x40]






and [rcx + 0x40], rbx 
-----------------------

pushfq
pushaq
lea rdx, [rcx + 0x40]

# we use rbp to save rsp value
# this is safe because both Windows x64 ABI and SystemV x64 ABI 
# guarantees rbp must be saved and restored by a function that uses them
mov rbp, rsp

sub rsp, 0x20
and rsp, 0xFFFFFFFFFFFFFFF0

mov rcx, this
mov r8, 8
mov rax, OnMemoryRead
call rax

mov rsp, rbp
popaq
popfq


push r15  # r15 is free reg which the instruction doesn't use, including hidden operands.
lea r15, [rcx + 0x40]
mov [rcx + 0x40], rbx  # execute original insturction before callback


pushfq
pushaq
mov rdx, r15

# we use rbp to save rsp value
# this is safe because both Windows x64 ABI and SystemV x64 ABI 
# guarantees rbp must be saved and restored by a function that uses them
mov rbp, rsp

sub rsp, 0x20
and rsp, 0xFFFFFFFFFFFFFFF0

mov rcx, this
mov r8, 8
mov rax, OnMemoryWrite
call rax

mov rsp, rbp
popaq
popfq

pop r15











rep movsd
==================
pushfq
pushaq
mov rbp, rsp

sub rsp, 0x20
and rsp, 0xFFFFFFFFFFFFFFF0

shl rcx, 2          # 1 for w, 2 for d, 3 for q
mov r9, rcx
mov rcx, this

pushfq
pop rax
bt rax, 0x0A     # DF
jnc label           # if CF=0

sub rdi, r9
sub rsi, r9

label:

mov rdx, rdi
mov r8, rsi
mov rax, OnStringMov
call rax

mov rsp, rbp
popaq
popfq
rep movsd

      