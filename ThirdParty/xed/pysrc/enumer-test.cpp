/// @file enumer-test.cpp

// This file was automatically generated.
// Do not edit this file.

#include <string.h>
#include <assert.h>
#include "enumer-test.H"

typedef struct {
    const char* name;
    test_type_t value;
} name_table_test_type_t;
static const name_table_test_type_t name_array_test_type_t[] = {
{"aaa", TEST_TYPE_aaa},
{"bbb", TEST_TYPE_bbb},
{"ccc", TEST_TYPE_ccc},
{"LAST", TEST_TYPE_LAST},
{0, TEST_TYPE_LAST},
};

        
test_type_t str2test_type_t(const char* s)
{
   const name_table_test_type_t* p = name_array_test_type_t;
   while( p->name ) {
     if (strcmp(p->name,s) == 0) {
      return p->value;
     }
     p++;
   }
        

   return TEST_TYPE_LAST;
}


const char* test_type_t2str(const test_type_t p)
{
   test_type_t type_idx = p;
   if ( p > TEST_TYPE_LAST) type_idx = TEST_TYPE_LAST;
   return name_array_test_type_t[type_idx].name;
}

test_type_t test_type_t_last(void) {
    return TEST_TYPE_LAST;
}
       
/*

Here is a skeleton switch statement embedded in a comment


  switch(p) {
  case TEST_TYPE_aaa:
  case TEST_TYPE_bbb:
  case TEST_TYPE_ccc:
  case TEST_TYPE_LAST:
  default:
     xed_assert(0);
  }
*/
